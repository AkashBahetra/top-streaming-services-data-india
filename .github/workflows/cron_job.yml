name: "Get Top PT Stream Services"

on:
  workflow_dispatch:
  schedule:
    - cron: '0 0,8,12,17 * * *'  # 00:00, 08:00, 12:00, 17:00 todos os dias

jobs:
  build:
    name: Build and Update Tokens
    runs-on: ubuntu-latest
    environment: Dev
    permissions:
      contents: write
      actions: write
      id-token: write
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt
          sudo apt-get update && sudo apt-get install -y jq

      - name: Run code quality checks
        run: |
          black --check --line-length 120 --target-version py312 top_pt_stream_services.py
          flake8 top_pt_stream_services.py --max-line-length=120
          bandit -r top_pt_stream_services.py

      - name: Install GitHub CLI
        run: sudo apt-get install gh -y

      - name: Refresh Trakt Token
        id: refresh
        env:
          REFRESH_TOKEN: ${{ secrets.REFRESH_TOKEN }}
          CLIENT_ID: ${{ secrets.CLIENT_ID }}
          CLIENT_SECRET: ${{ secrets.CLIENT_SECRET }}
          GITHUB_TOKEN: ${{ secrets.GH_PAT }}
        run: |
          response=$(curl -s --location 'https://api.trakt.tv/oauth/token' \
            --header 'Content-Type: application/json' \
            --data '{
                "refresh_token": "'"$REFRESH_TOKEN"'",
                "client_id": "'"$CLIENT_ID"'",
                "client_secret": "'"$CLIENT_SECRET"'",
                "redirect_uri": "urn:ietf:wg:oauth:2.0:oob",
                "grant_type": "refresh_token"
            }')

          # Check if the response was successful
          if ! echo "$response" | jq -e .access_token > /dev/null; then
            echo "Error refreshing token. Response: $response"
            exit 1
          fi

          access_token=$(echo "$response" | jq -r '.access_token')
          refresh_token=$(echo "$response" | jq -r '.refresh_token')
          expires_in=$(echo "$response" | jq -r '.expires_in')
          created_at=$(echo "$response" | jq -r '.created_at')

          echo "::add-mask::$access_token"
          echo "::add-mask::$refresh_token"

          # Save tokens and metadata as outputs
          {
            echo "access_token=$access_token"
            echo "refresh_token=$refresh_token"
            echo "expires_in=$expires_in"
            echo "created_at=$created_at"
          } >> "$GITHUB_OUTPUT"

          # Update GitHub environment secrets for future runs
          gh secret set ACCESS_TOKEN --body "$access_token" --env Dev
          gh secret set REFRESH_TOKEN --body "$refresh_token" --env Dev

          # Verify the secrets were updated
          echo "Verifying token update..."
          if ! gh secret list --env Dev | grep -q ACCESS_TOKEN; then
            echo "Failed to update ACCESS_TOKEN"
            exit 1
          fi

      - name: Run Python Script
        env:
          CLIENT_ID: ${{ secrets.CLIENT_ID }}
          ACCESS_TOKEN: ${{ steps.refresh.outputs.access_token }}
          REFRESH_TOKEN: ${{ steps.refresh.outputs.refresh_token }}  # Pass the new refresh token
          KIDS_LIST: ${{ vars.KIDS_LIST }}
          PRINT_LISTS: ${{ vars.PRINT_LISTS }}
        run: |
          # Verify we have the new access token
          if [ -z "$ACCESS_TOKEN" ]; then
            echo "ACCESS_TOKEN is empty!"
            exit 1
          fi
          python top_pt_stream_services.py
