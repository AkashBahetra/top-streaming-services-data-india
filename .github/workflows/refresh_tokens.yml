name: "Refresh Trakt.tv Tokens"

on:
  workflow_dispatch:
  schedule:
    - cron: '0 0 * * *'  # Run daily at midnight

jobs:
  refresh-tokens:
    name: Refresh All Account Tokens
    runs-on: ubuntu-latest
    permissions:
      contents: write
      actions: write
      id-token: write
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Refresh Netflix Account Token
        id: refresh-netflix
        run: |
          response=$(curl -s --location 'https://api.trakt.tv/oauth/token' \
              --header 'Content-Type: application/json' \
              --data '{
                  "refresh_token": "'"$NETFLIX_REFRESH_TOKEN"'",
                  "client_id": "'"$NETFLIX_CLIENT_ID"'",
                  "client_secret": "'"$NETFLIX_CLIENT_SECRET"'",
                  "redirect_uri": "urn:ietf:wg:oauth:2.0:oob",
                  "grant_type": "refresh_token"
              }')
          
          # Check if the response was successful
          if ! echo "$response" | jq -e .access_token > /dev/null; then
            echo "Error refreshing Netflix token. Response: $response"
            exit 1
          fi
          
          access_token=$(echo "$response" | jq -r '.access_token')
          refresh_token=$(echo "$response" | jq -r '.refresh_token')
          expires_in=$(echo "$response" | jq -r '.expires_in')
          created_at=$(echo "$response" | jq -r '.created_at')
          
          echo "::add-mask::$access_token"
          echo "::add-mask::$refresh_token"
          
          # Save tokens and metadata as outputs
          {
            echo "netflix_access_token=$access_token"
            echo "netflix_refresh_token=$refresh_token"
            echo "netflix_expires_in=$expires_in"
            echo "netflix_created_at=$created_at"
          } >> "$GITHUB_OUTPUT"
          
          # Update GitHub environment secrets for future runs
          gh secret set NETFLIX_ACCESS_TOKEN --body "$access_token"
          gh secret set NETFLIX_REFRESH_TOKEN --body "$refresh_token"
        env:
          NETFLIX_CLIENT_ID: ${{ secrets.NETFLIX_CLIENT_ID }}
          NETFLIX_CLIENT_SECRET: ${{ secrets.NETFLIX_CLIENT_SECRET }}
          NETFLIX_REFRESH_TOKEN: ${{ secrets.NETFLIX_REFRESH_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Refresh Prime Video Account Token
        id: refresh-prime
        run: |
          response=$(curl -s --location 'https://api.trakt.tv/oauth/token' \
              --header 'Content-Type: application/json' \
              --data '{
                  "refresh_token": "'"$PRIME_REFRESH_TOKEN"'",
                  "client_id": "'"$PRIME_CLIENT_ID"'",
                  "client_secret": "'"$PRIME_CLIENT_SECRET"'",
                  "redirect_uri": "urn:ietf:wg:oauth:2.0:oob",
                  "grant_type": "refresh_token"
              }')
          
          # Check if the response was successful
          if ! echo "$response" | jq -e .access_token > /dev/null; then
            echo "Error refreshing Prime Video token. Response: $response"
            exit 1
          fi
          
          access_token=$(echo "$response" | jq -r '.access_token')
          refresh_token=$(echo "$response" | jq -r '.refresh_token')
          expires_in=$(echo "$response" | jq -r '.expires_in')
          created_at=$(echo "$response" | jq -r '.created_at')
          
          echo "::add-mask::$access_token"
          echo "::add-mask::$refresh_token"
          
          # Save tokens and metadata as outputs
          {
            echo "prime_access_token=$access_token"
            echo "prime_refresh_token=$refresh_token"
            echo "prime_expires_in=$expires_in"
            echo "prime_created_at=$created_at"
          } >> "$GITHUB_OUTPUT"
          
          # Update GitHub environment secrets for future runs
          gh secret set PRIME_ACCESS_TOKEN --body "$access_token"
          gh secret set PRIME_REFRESH_TOKEN --body "$refresh_token"
        env:
          PRIME_CLIENT_ID: ${{ secrets.PRIME_CLIENT_ID }}
          PRIME_CLIENT_SECRET: ${{ secrets.PRIME_CLIENT_SECRET }}
          PRIME_REFRESH_TOKEN: ${{ secrets.PRIME_REFRESH_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Refresh Others Account Token
        id: refresh-others
        run: |
          response=$(curl -s --location 'https://api.trakt.tv/oauth/token' \
              --header 'Content-Type: application/json' \
              --data '{
                  "refresh_token": "'"$OTHERS_REFRESH_TOKEN"'",
                  "client_id": "'"$OTHERS_CLIENT_ID"'",
                  "client_secret": "'"$OTHERS_CLIENT_SECRET"'",
                  "redirect_uri": "urn:ietf:wg:oauth:2.0:oob",
                  "grant_type": "refresh_token"
              }')
          
          # Check if the response was successful
          if ! echo "$response" | jq -e .access_token > /dev/null; then
            echo "Error refreshing Others token. Response: $response"
            exit 1
          fi
          
          access_token=$(echo "$response" | jq -r '.access_token')
          refresh_token=$(echo "$response" | jq -r '.refresh_token')
          expires_in=$(echo "$response" | jq -r '.expires_in')
          created_at=$(echo "$response" | jq -r '.created_at')
          
          echo "::add-mask::$access_token"
          echo "::add-mask::$refresh_token"
          
          # Save tokens and metadata as outputs
          {
            echo "others_access_token=$access_token"
            echo "others_refresh_token=$refresh_token"
            echo "others_expires_in=$expires_in"
            echo "others_created_at=$created_at"
          } >> "$GITHUB_OUTPUT"
          
          # Update GitHub environment secrets for future runs
          gh secret set OTHERS_ACCESS_TOKEN --body "$access_token"
          gh secret set OTHERS_REFRESH_TOKEN --body "$refresh_token"
        env:
          OTHERS_CLIENT_ID: ${{ secrets.OTHERS_CLIENT_ID }}
          OTHERS_CLIENT_SECRET: ${{ secrets.OTHERS_CLIENT_SECRET }}
          OTHERS_REFRESH_TOKEN: ${{ secrets.OTHERS_REFRESH_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Verify All Tokens
        run: |
          echo "Verifying token updates..."
          for token in NETFLIX_ACCESS_TOKEN NETFLIX_REFRESH_TOKEN \
                      PRIME_ACCESS_TOKEN PRIME_REFRESH_TOKEN \
                      OTHERS_ACCESS_TOKEN OTHERS_REFRESH_TOKEN; do
            if ! gh secret list | grep -q $token; then
              echo "Failed to update $token"
              exit 1
            fi
          done
          echo "All tokens verified successfully!"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}